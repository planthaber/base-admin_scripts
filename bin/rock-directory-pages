#! /usr/bin/env ruby

base_dir = File.expand_path('../lib', File.dirname(__FILE__))
$LOAD_PATH.unshift base_dir

PAGES_DIR = File.join(base_dir, 'rock', 'pages', 'package_directory')
ENV['VIZKIT_NO_GUI'] = '1'

require 'autoproj'
require 'autoproj/cli/inspection_tool'
require 'rock/package_directory'
require 'optparse'

generate_status = []
parser = OptionParser.new do |opt|
    opt.banner = "rock-directory-pages [OPTIONS] output_dir [api_dir]"
    opt.on('--status=DIFFSPEC', String, "generate status pages. DIFFSPEC is FROM_FLAVOR:TO_FLAVOR,FROM_FLAVOR:TO_FLAVOR,...") do |status|
	generate_status = status.split(',').map do |s|
	    s.split(':')
	end
    end
    opt.on('--help') do
        puts opt
	exit
    end
    opt.on('--debug') do
        Rock::Doc::PackageDirectory.logger.level = Logger::DEBUG
    end
end

remaining  = parser.parse(ARGV)
output_dir = remaining.shift
api_dir    = remaining.shift
if !output_dir
    puts parser
    exit 1
end

#Autoproj.silent do
#    Autoproj::CLI::InspectionTool.initialize_and_load([])
#end
require 'orocos'
Orocos.load

package_directory = Rock::Doc::PackageDirectory.new(output_dir)
package_directory.api_dir = api_dir
package_directory.prepare
package_directory.render_api_virtual
package_directory.render_autoproj_packages
package_directory.render_autoproj_package_sets
package_directory.render_autoproj_osdeps
package_directory.render_orogen_types
package_directory.render_orogen_tasks

initial_flavor = YAML.load(File.read(File.join(".autoproj", "config.yml")))['ROCK_FLAVOR']

ret_code = 0
begin
    generate_status.each_with_index do |(from, to), sort_info|
        failed_update = false
        ENV['ROCK_FORCE_FLAVOR'] = from
        if !system('autoproj', 'update', '--no-osdeps', '-k')
            failed_update = true
            STDERR.puts "could not reset the current state to flavor #{from}"
            ret_code = 2
        end
        outfile = File.join(output_dir, "status_#{from}_#{to}.page")
        if !system('rock-status', '--sort', (2000 + sort_info).to_s, from, to, outfile)
            if failed_update
                lines = File.readlines(outfile)
                lines = lines[0, 4] +
                    [
                        "This status update is incomplete as the generation process failed.\n",
                        "It might contain less commits / updates than there should be\n",
                        "{: .warning}\n"] +
                    lines[4..-1]
                File.open(outfile, 'w') do |io|
                    io.write(lines.join(""))
                end
            end
            STDERR.puts "rock-status #{from} #{to} failed"
            ret_code = 2
        end
    end
ensure
    if ENV['ROCK_FORCE_FLAVOR'] && ENV['ROCK_FORCE_FLAVOR'] != initial_flavor
        ENV['ROCK_FORCE_FLAVOR'] = initial_flavor
        if !system('autoproj', 'update', '--no-osdeps')
            STDERR.puts "could not reset the current state to the initial flavor #{initial_flavor}"
            # Do not override the retcode 2
            if ret_code == 0
                ret_code = 3
            end
        end
    end
end
exit ret_code
